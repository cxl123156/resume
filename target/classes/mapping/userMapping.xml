<?xml version="1.0" encoding="UTF-8" ?>
         <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        <!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
 例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
  -->
<mapper namespace="com.resume.mapper.UserMapper">
         <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
     使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
     resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
     User类就是users表所对应的实体类
     -->
       <!--
         根据id查询得到一个user对象
     -->
         <select id="getUserById"
            resultType="com.resume.entity.User">
            select * from T_USER where id=#{id}
         </select>
         <select id="getUserByName"
            resultType="com.resume.entity.User">
            select * from T_USER where username=#{username}
         </select>
         <insert id="insertAndGetId"    parameterType="com.resume.entity.User">
            insert into T_USER (username,password,email,age,birthday,nativePlace,phone,webSite,realName,college,major,degree)
            values(#{user.username},#{user.password},#{user.email},#{user.age},#{user.birthday},#{user.nativePlace},#{user.phone},#{user.webSite},#{user.realName},#{user.college},#{user.major},#{user.degree})
         </insert>
         <delete id="deleteUserById" >
             delete FROM T_USER where id=#{id}
         </delete>
        <update id="updateUserInfo" >
            UPDATE T_USER SET email=#{email},age=#{age},birthday=#{birthday},nativePlace=#{nativePlace},phone=#{phone},webSite=#{webSite},realName=#{realName},college=#{college},major=#{major},degree=#{degree}
            WHERE id=#{id}
        </update>
        <update id="updateUserPWD" >
            UPDATE T_USER SET password=#{password}
            WHERE id=#{id}
        </update>
</mapper>
